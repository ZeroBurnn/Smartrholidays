import requests
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

# üîπ Flask + CORS
app = Flask(__name__)
CORS(app)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# üîπ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
VK_ACCESS_TOKEN = os.getenv("VK_API_TOKEN")
VK_PEER_ID = int(os.getenv("VK_PEER_ID", "1"))  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ int
VK_API_VERSION = "5.131"

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK
def send_vk_message(name, phone, shift, email):
    try:
        message = f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìß Email: {email}"
        if shift:
            message += f"\nüìÖ –°–º–µ–Ω–∞: {shift}"

        url = "https://api.vk.com/method/messages.send"
        payload = {
            "peer_id": VK_PEER_ID,
            "random_id": 0,
            "message": message,
            "access_token": VK_ACCESS_TOKEN,
            "v": VK_API_VERSION
        }

        response = requests.post(url, data=payload)
        result = response.json()

        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ VK API: {result}")
            return False

        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –í–ö –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –í–ö: {e}")
        return False


@app.route("/futurecode")
def futurecode():
    return render_template("futurecode.html")

@app.route("/futurequiz")
def futurequiz():
    return render_template("futurequiz.html")

@app.route("/")
def home():
    return render_template("smartholydays.html")


@app.route("/submit_form", methods=["POST"])
def submit_form():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"message": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"}), 400

        name = data.get("name")
        phone = data.get("phone")
        shift = data.get("shift", "")
        email = data.get("email")

        if not name or not phone or not email:
            return jsonify({"message": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ email"}), 400

        print(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞: –ò–º—è: {name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}, Email: {email}, –°–º–µ–Ω–∞: {shift}")

        vk_sent = send_vk_message(name, phone, shift, email)

        if vk_sent:
            return jsonify({
                "message": "–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!" if not shift
                else "–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!"
            }), 200
        else:
            return jsonify({"message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!"}), 500

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"}), 500


@app.route("/submit_quiz", methods=["POST"])
def submit_quiz():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

        name = data.get("name")
        phone = data.get("phone")
        email = data.get("email")
        answers = data.get("answers", [])

        if not name or not phone or not email or not answers:
            return jsonify({"message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç"}), 400

        message = f"üß† –ó–∞–ø–æ–ª–Ω–µ–Ω –æ–ø—Ä–æ—Å FutureCode:\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìß Email: {email}\n\nüìã –û—Ç–≤–µ—Ç—ã:"
        for item in answers:
            question = item.get("question", "").strip()
            answer = item.get("answer", "").strip()
            if question and answer:
                message += f"\n‚Ä¢ {question}: {answer}"

        url = "https://api.vk.com/method/messages.send"
        payload = {
            "peer_id": VK_PEER_ID,
            "random_id": 0,
            "message": message,
            "access_token": VK_ACCESS_TOKEN,
            "v": VK_API_VERSION
        }

        response = requests.post(url, data=payload)
        result = response.json()

        if "error" in result:
            print(f"‚ùå VK API error: {result}")
            return jsonify({"message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK"}), 500

        print("‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –í–ö!")
        return jsonify({"message": "–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"}), 200

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        return jsonify({"message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞"}), 500


# üîπ –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
start_time = datetime.now()
duration = timedelta(hours=24)

@app.route('/countdown')
def countdown():
    now = datetime.now()
    end_time = start_time + duration
    remaining = end_time - now

    if remaining.total_seconds() <= 0:
        remaining = timedelta(seconds=0)

    hours, remainder = divmod(int(remaining.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)

    return jsonify({
        'hours': str(hours).zfill(2),
        'minutes': str(minutes).zfill(2),
        'seconds': str(seconds).zfill(2)
    })

if __name__ == "__main__":
    app.run(debug=True)
