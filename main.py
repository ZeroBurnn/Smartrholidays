import os
import requests
import sqlite3
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template, redirect, url_for, flash, session, send_file, abort, make_response
from werkzeug.security import generate_password_hash, check_password_hash
from flask_cors import CORS
from dotenv import load_dotenv
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import csv
from functools import wraps
from werkzeug.utils import secure_filename
from datetime import datetime, timedelta

app = Flask(__name__)
app.secret_key = 'Ffdsgfdg!2424*!fsdfqwSFFG'
CORS(app)
load_dotenv()
VK_ACCESS_TOKEN = os.getenv("VK_API_TOKEN")
VK_PEER_ID = int(os.getenv("VK_PEER_ID", "1"))
VK_API_VERSION = "5.131"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
start_time = datetime.now()
duration = timedelta(hours=24)

@app.route('/get_timer', methods=['GET'])
def get_timer():
    global start_time  # Declare `start_time` as global to modify it
    elapsed_time = datetime.now() - start_time
    remaining_time = duration - elapsed_time
    if remaining_time.total_seconds() <= 0:
        # Reset the timer
        start_time = datetime.now()  # Update the global `start_time`
        remaining_time = duration
    # Break down the remaining time into hours, minutes, and seconds
    hours, remainder = divmod(remaining_time.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    # Return the remaining time as JSON
    return jsonify({
        'hours': hours,
        'minutes': minutes,
        'seconds': seconds
    })

def init_db():
    with sqlite3.connect('users.db') as conn:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        conn.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            full_name TEXT NOT NULL,
            email TEXT NOT NULL UNIQUE,
            password TEXT NOT NULL,
            role TEXT DEFAULT 'user'
        )''')
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        conn.execute('''CREATE TABLE IF NOT EXISTS quiz_responses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            email TEXT NOT NULL,
            course TEXT,  -- –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
            answers TEXT NOT NULL,
            submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        conn.commit()

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if "user_id" not in session or session.get("role") != "admin":
            flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return redirect(url_for("login"))
        return f(*args, **kwargs)
    return decorated_function

def send_registration_email(to_email, full_name, password):
    try:
        msg = MIMEMultipart("alternative")
        msg["Subject"] = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫–∞–¥–µ–º–∏—é —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!"
        msg["From"] = os.getenv("MAIL_USERNAME")
        msg["To"] = to_email
        html_content = f"""
        <html>
            <body>
                <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!</h2>
                <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ê–∫–∞–¥–µ–º–∏–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.</p>
                <p><strong>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</strong></p>
                <ul>
                    <li>Email: {to_email}</li>
                    <li>–ü–∞—Ä–æ–ª—å: {password}</li>
                </ul>
                <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.</p>
                <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                <br>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ê–∫–∞–¥–µ–º–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</p>
            </body>
        </html>
        """
        msg.attach(MIMEText(html_content, "html"))
        with smtplib.SMTP(os.getenv("MAIL_SERVER"), int(os.getenv("MAIL_PORT"))) as server:
            server.starttls()
            server.login(os.getenv("MAIL_USERNAME"), os.getenv("MAIL_PASSWORD"))
            server.sendmail(msg["From"], [msg["To"]], msg.as_string())
        print("üìß –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", e)
        return False

def send_vk_message(name, phone, course, email):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        message = "–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:\n"
        message += f"–ò–º—è: {name}\n"
        message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        message += f"Email: {email}\n"
        if course:
            message += f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {course}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
        message += "–û—Ç–≤–µ—Ç—ã:\n"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ VK API
        response = requests.post("https://api.vk.com/method/messages.send", data={
            "peer_id": VK_PEER_ID,
            "random_id": 0,
            "message": message,
            "access_token": VK_ACCESS_TOKEN,
            "v": VK_API_VERSION
        })
        response.raise_for_status()  # Raise an error for bad responses
        result = response.json()
        if "error" in result:
            print("‚ùå VK Error:", result["error"])
            return False
        return True

    except requests.exceptions.RequestException as e:
        print("‚ùå Request Error:", e)
        return False
    except Exception as e:
        print("‚ùå General Error:", e)
        return False

@app.route('/submit_quiz', methods=['POST'])
def submit_quiz():
    try:
        data = request.get_json()
        name = data.get("name")
        phone = data.get("phone")
        email = data.get("email")
        course = data.get("course")
        message = data.get("message")  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect('users.db') as conn:
            conn.execute("""
                INSERT INTO quiz_responses (name, phone, email, answers)
                VALUES (?, ?, ?, ?)
            """, (name, phone, email, message))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            conn.commit()

        return jsonify({"status": "success", "message": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞: {e}")
        return jsonify({"status": "error", "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö"}), 500

@app.route("/")
def home():
    return render_template("smartholydays.html")

@app.route("/ITakademia")
def itakademia():
    return render_template("itakademia.html")

@app.route("/futurecode")
def futurecode():
    return render_template("futurecode.html")

@app.route("/futurequiz")
def futurequiz():
    return render_template("futurequiz.html")

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        full_name = request.form['full_name']
        email = request.form['email']
        password = request.form['password']
        confirm = request.form['confirm']
        if password != confirm:
            flash("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return redirect(url_for('register'))
        hashed = generate_password_hash(password)
        try:
            with sqlite3.connect("users.db") as conn:
                conn.execute("INSERT INTO users (full_name, email, password) VALUES (?, ?, ?)",
                             (full_name, email, hashed))
                conn.commit()
                send_registration_email(email, full_name, password)
                flash("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –≤–æ–π–¥–∏—Ç–µ")
                return redirect(url_for("login"))
        except sqlite3.IntegrityError:
            flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return redirect(url_for("register"))
    return render_template("registration.html")

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']
        with sqlite3.connect("users.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT id, password FROM users WHERE email = ?", (email,))
            user = cur.fetchone()
            if user and check_password_hash(user[1], password):
                session["user_id"] = user[0]
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
                cur.execute("SELECT role FROM users WHERE id = ?", (user[0],))
                role = cur.fetchone()[0]
                session["role"] = role
                flash("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                return redirect(url_for("my"))
            else:
                flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    return render_template("login.html")

@app.route("/my", endpoint="my")
def my():
    if "user_id" not in session:
        return redirect(url_for("login"))
    return render_template("my.html")

@app.route("/logout")
def logout():
    session.pop("user_id", None)
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
    return redirect(url_for("login"))

@app.route("/course_request", methods=["POST"])
def course_request():
    name = request.form.get("name")
    email = request.form.get("email")
    phone = request.form.get("phone")
    direction = request.form.get("direction")
    if not all([name, email, phone, direction]):
        flash("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.")
        return redirect(request.referrer or url_for("home"))
    message_sent = send_vk_message(name, phone, direction, email)
    if message_sent:
        flash("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        flash("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return redirect(request.referrer or url_for("home"))

@app.route("/submit_form", methods=["POST"])
def submit_form():
    data = request.get_json()
    name = data.get("name")
    email = data.get("email")
    phone = data.get("phone")
    shift = data.get("shift")
    if not all([name, email, phone]):
        return jsonify({"success": False, "message": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"}), 400
    message_sent = send_vk_message(name, phone, shift, email)
    if message_sent:
        return jsonify({"success": True, "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"})
    else:
        return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"}), 500

@app.route("/admin")
@admin_required
def admin_panel():
    role_filter = request.args.get("role")
    email_filter = request.args.get("email")
    query = "SELECT * FROM users WHERE 1=1"
    params = []
    if role_filter:
        query += " AND role = ?"
        params.append(role_filter)
    if email_filter:
        query += " AND email LIKE ?"
        params.append(f"%{email_filter}%")
    with sqlite3.connect('users.db') as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute(query, params)
        users = cur.fetchall()
    return render_template("admin_panel.html", users=users)

@app.route("/create_user", methods=["GET", "POST"])
@admin_required
def create_user():
    if request.method == "POST":
        full_name = request.form['full_name']
        email = request.form['email']
        password = request.form['password']
        role = request.form['role']
        hashed = generate_password_hash(password)
        with sqlite3.connect('users.db') as conn:
            conn.execute("INSERT INTO users (full_name, email, password, role) VALUES (?, ?, ?, ?)",
                         (full_name, email, hashed, role))
            conn.commit()
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
        return redirect(url_for("admin_panel"))
    return render_template("create_user.html")

@app.route("/edit_user/<int:user_id>", methods=["GET", "POST"])
@admin_required
def edit_user(user_id):
    with sqlite3.connect('users.db') as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        user = cur.fetchone()
    if request.method == "POST":
        full_name = request.form['full_name']
        email = request.form['email']
        password = request.form['password']
        role = request.form['role']
        hashed = generate_password_hash(password)
        with sqlite3.connect('users.db') as conn:
            conn.execute("UPDATE users SET full_name = ?, email = ?, password = ?, role = ? WHERE id = ?",
                         (full_name, email, hashed, role, user_id))
            conn.commit()
        flash("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return redirect(url_for("admin_panel"))
    return render_template("edit_user.html", user=user)

@app.route("/delete_user/<int:user_id>", methods=["POST"])
@admin_required
def delete_user(user_id):
    with sqlite3.connect('users.db') as conn:
        conn.execute("DELETE FROM users WHERE id = ?", (user_id,))
        conn.commit()
    flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
    return redirect(url_for("admin_panel"))

@app.route("/export_csv")
@admin_required
def export_csv():
    with sqlite3.connect('users.db') as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM users")
        users = cur.fetchall()
    output = []
    output.append(['ID', 'Full Name', 'Email', 'Role'])
    for user in users:
        output.append([user[0], user[1], user[2], user[4]])
    si = "\n".join([",".join(map(str, row)) for row in output])
    response = make_response(si)
    response.headers["Content-Disposition"] = "attachment; filename=users.csv"
    response.headers["Content-type"] = "text/csv"
    return response

if __name__ == "__main__":
    init_db()
    app.run(debug=True)